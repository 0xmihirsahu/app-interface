name: Deploy via SSM

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure jq present
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Write deploy script
        run: |
          cat > deploy.sh <<'EOS'
          set -euo pipefail
          umask 022

          echo "== Running deploy script on EC2 =="

          APP_DIR="${{ secrets.EC2_PATH }}"
          # Use HTTPS + PAT to avoid SSH key setup on the instance
          REPO_HTTPS="https://x-access-token:${{ secrets.GH_PAT }}@github.com/SpoutFinance/app-interface.git"

          echo "== Disk =="
          df -h || true
          echo "== Inodes =="
          df -i || true

          # Pre-clean
          if command -v journalctl >/dev/null 2>&1; then
            sudo journalctl --vacuum-time=3d || true
          fi
          sudo rm -rf /tmp/* || true
          rm -rf "$HOME/.npm/_cacache" "$HOME/.cache" || true

          mkdir -p "$APP_DIR"

          # Clone or update repo (self-healing, shallow)
          if [ ! -d "$APP_DIR/.git" ]; then
            rm -rf "$APP_DIR"
            mkdir -p "$APP_DIR"
            git clone --depth=1 "$REPO_HTTPS" "$APP_DIR"
          else
            cd "$APP_DIR"
            git remote set-url origin "$REPO_HTTPS"
            git fetch --depth=1 origin main || {
              cd ..
              rm -rf "$APP_DIR"
              mkdir -p "$APP_DIR"
              git clone --depth=1 "$REPO_HTTPS" "$APP_DIR"
              cd "$APP_DIR"
            }
            git checkout -f main
            git reset --hard origin/main
          fi
          cd "$APP_DIR"

          # Node setup
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
          nvm use --lts

          export TMPDIR="$HOME/.tmp-npm"
          export npm_config_cache="$HOME/.npm"
          mkdir -p "$TMPDIR" "$npm_config_cache"
          export NODE_ENV=production

          # Install & build
          if [ -f package-lock.json ]; then
            npm ci --no-audit --progress=false || (npm cache clean --force && npm ci --no-audit --progress=false)
          else
            npm i --no-audit --progress=false || (npm cache clean --force && npm i --no-audit --progress=false)
          fi

          npm run build
          npm prune --omit=dev || true

          # PM2
          if ! command -v pm2 >/dev/null 2>&1; then
            npm i -g pm2
          fi

          if [ ! -f ecosystem.config.js ]; then
            cat > ecosystem.config.js <<'EOF'
            module.exports = {
              apps: [{
                name: "spout-finance",
                script: "node_modules/next/dist/bin/next",
                args: "start -p 3000",
                cwd: "${{ secrets.EC2_PATH }}",
                env: { NODE_ENV: "production" }
              }]
            }
            EOF
          fi

          pm2 reload ecosystem.config.js --update-env || pm2 start ecosystem.config.js
          pm2 save

          echo "== Disk (post) =="
          df -h || true
          echo "== Inodes (post) =="
          df -i || true
          EOS

      - name: Wrap script into SSM parameters
        run: |
          {
            printf "bash -lc 'cat > /tmp/deploy.sh <<\"EOS\"\n"
            cat deploy.sh
            printf "\nEOS\nbash /tmp/deploy.sh'\n"
          } > cmd.txt

          jq -Rs '{commands: [.]}' cmd.txt > params.json

      - name: Run deploy script via SSM (with live logs)
        run: |
          CID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "CI deploy" \
            --parameters file://params.json \
            --query "Command.CommandId" \
            --output text)

          echo "CommandId=$CID"

          # Poll until the command finishes, streaming logs
          while true; do
            OUT=$(aws ssm get-command-invocation \
              --command-id "$CID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --output json)

            STATUS=$(echo "$OUT" | jq -r .Status)

            echo "SSM status: $STATUS"
            echo "---- STDOUT ----"
            echo "$OUT" | jq -r .StandardOutputContent
            echo "---- STDERR ----"
            echo "$OUT" | jq -r .StandardErrorContent

            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deploy succeeded"
              exit 0
            fi

            if [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "❌ Deploy failed"
              exit 1
            fi

            sleep 3
          done
