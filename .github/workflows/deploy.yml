- name: Deploy over SSH (self-healing, pre-clone cleanup)
  uses: appleboy/ssh-action@v1.0.3
  with:
    host: ${{ secrets.EC2_HOST }}
    username: ${{ secrets.EC2_USER }}
    key: ${{ secrets.EC2_SSH_KEY }}
    script_stop: true
    script: |
      set -euo pipefail
      umask 022

      APP_DIR="${{ secrets.EC2_PATH }}"
      REPO_SSH="git@github.com:SpoutFinance/app-interface.git"

      echo "== Ensure app dir exists =="
      mkdir -p "$APP_DIR"

      echo "== Pre-clone cleanup to avoid ENOSPC =="
      # Global cleanup first (logs, tmp)
      if command -v journalctl >/dev/null 2>&1; then
        sudo journalctl --vacuum-time=3d || true
      fi
      sudo rm -rf /var/log/*.gz /var/log/*.[0-9] /tmp/* || true

      # App-specific bulky dirs (even before git exists)
      rm -rf "$APP_DIR/node_modules" "$APP_DIR/.next" || true
      rm -rf "$HOME/.npm/_cacache" "$HOME/.cache" || true

      echo "== Disk health (pre) =="
      df -h || true
      df -i || true

      echo "== Clone or update repo (shallow) =="
      if [ ! -d "$APP_DIR/.git" ]; then
        rm -rf "$APP_DIR"
        mkdir -p "$APP_DIR"
        git clone --depth=1 "$REPO_SSH" "$APP_DIR"
      else
        cd "$APP_DIR"
        # If repo is corrupted due to previous ENOSPC, reclone
        if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
          cd ..
          rm -rf "$APP_DIR"
          mkdir -p "$APP_DIR"
          git clone --depth=1 "$REPO_SSH" "$APP_DIR"
          cd "$APP_DIR"
        else
          git fetch --depth=1 origin main || {
            echo "Fetch failed (likely due to previous corruption). Recloning..."
            cd ..
            rm -rf "$APP_DIR"
            mkdir -p "$APP_DIR"
            git clone --depth=1 "$REPO_SSH" "$APP_DIR"
            cd "$APP_DIR"
          }
          git checkout -f main
          git reset --hard origin/main
        fi
      fi

      echo "== Node setup (nvm) =="
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
      nvm use --lts

      echo "== Safer npm temp/cache =="
      export TMPDIR="$HOME/.tmp-npm"
      export npm_config_cache="$HOME/.npm"
      mkdir -p "$TMPDIR" "$npm_config_cache"

      echo "== Clean previous artifacts =="
      rm -rf node_modules .next

      echo "== Install dependencies =="
      export NODE_ENV=production
      if [ -f package-lock.json ]; then
        npm ci --no-audit --progress=false || (npm cache clean --force && npm ci --no-audit --progress=false)
      else
        npm i --no-audit --progress=false || (npm cache clean --force && npm i --no-audit --progress=false)
      fi

      echo "== Build =="
      npm run build

      echo "== Prune devDependencies for runtime =="
      npm prune --omit=dev || true

      echo "== PM2 process file =="
      if [ ! -f ecosystem.config.js ]; then
        cat > ecosystem.config.js <<'EOF'
        module.exports = {
          apps: [{
            name: "spout-finance",
            script: "node_modules/next/dist/bin/next",
            args: "start -p 3000",
            cwd: "${{ secrets.EC2_PATH }}",
            env: { NODE_ENV: "production" }
          }]
        }
        EOF
      fi

      echo "== Start/Reload PM2 =="
      if ! command -v pm2 >/dev/null 2>&1; then
        npm i -g pm2
      fi
      pm2 reload ecosystem.config.js --update-env || pm2 start ecosystem.config.js
      pm2 save

      echo "== Disk health (post) =="
      df -h || true
      df -i || true
